{"version":3,"sources":["logo.svg","App.js","serviceWorker.js","index.js"],"names":["module","exports","stage","anychart","graphics","create","line","bounds","chart2","column","App","useState","count","setCount","resultArray","setResultArray","arrOrginal","useEffect","result","arr","j","temp","l","length","contador","i","mergeSort","className","src","logo","alt","style","display","map","itemOld","item","instance","width","height","charts","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"wFAAAA,EAAOC,QAAU,IAA0B,kC,mOCOvCC,EAAQC,IAASC,SAASC,SACjBF,IAASG,KAAK,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,IAC7CC,OAAO,EAAG,EAAG,OAAQ,OAC5B,IAAIC,EAASL,IAASM,SACtBD,EAAOC,OAAO,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,IACvCD,EAAOF,KAAK,CAAC,IAAK,EAAG,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IACxDE,EAAOD,OAAO,EAAG,MAAO,OAAQ,OA8EjBG,MA3Ef,WAAgB,IAAD,EACaC,mBAAS,GADtB,mBACNC,EADM,KACCC,EADD,OAEyBF,mBAAS,IAFlC,mBAENG,EAFM,KAEOC,EAFP,KAGPC,EAAa,CAAC,IAAK,EAAG,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,GA0B/D,OAJAC,qBAAU,WACR,IAAMC,EApBU,SAAAC,GAIhB,IAHA,IACIC,EAAGC,EADDC,EAAIH,EAAII,OAEVC,EAAW,EACLC,EAAI,EAAGA,EAAIH,EAAGG,IAAM,CAG5B,IAFAL,EAAIK,EACJJ,EAAOF,EAAKM,GACJL,EAAI,GAAKD,EAAKC,EAAI,GAAMC,GAC9BF,EAAKC,GAAMD,EAAKC,EAAI,GACpBA,IAEFI,EAAWC,IACXN,EAAKC,GAAMC,EAIb,OAFAR,EAASW,GAEFL,EAIQO,CAAUV,GACzBD,EAAeG,KACd,IAED,yBAAKS,UAAU,OACb,4BAAQA,UAAU,cAChB,yBAAKC,IAAKC,IAAMF,UAAU,WAAWG,IAAI,SACzC,4CAEA,6BACA,yBAAKC,MAAO,CAAEC,QAAS,SACtBhB,EAAWiB,KAAI,SAAAC,GAAO,OAClB,2BACCA,EADD,UAQL,+CAGA,yBAAKH,MAAO,CAAEC,QAAS,SACtBlB,EAAYmB,KAAI,SAAAE,GAAI,OAChB,2BACCA,EADD,SAKL,sDAGA,2BACCvB,GAGC,kBAAC,IAAD,CACEwB,SAAUlC,EACVmC,MAAO,IACPC,OAAQ,IACRC,OAAQ,CAAC/B,QCvEDgC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.6051075d.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","/* eslint-disable react-hooks/exhaustive-deps */\nimport React, {useState, useEffect} from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport AnyChart from 'anychart-react'\nimport anychart from 'anychart'\n\nlet stage = anychart.graphics.create();\nlet chart1 = anychart.line([1, 2, 3, 4, 5, 6, 7, 8, 9]);\nchart1.bounds(0, 0, '100%', '50%');\nlet chart2 = anychart.column();\nchart2.column([1, 2, 3, 4, 5, 6, 7, 8, 9]);\nchart2.line([100, 4, 420, 322, 617, 122, 433, 314, 653, 1]);\nchart2.bounds(0, '50%', '100%', '50%');\n\n\nfunction App() {\n  const [count, setCount] = useState(0);\n  const [resultArray, setResultArray] = useState([]);\n  const arrOrginal = [100, 4, 420, 322, 617, 122, 433, 314, 653, 1];\n\n  \n  const mergeSort = arr => {\n    const l = arr.length;\n    let j, temp;\n    let contador = 0;\n    for ( let i = 1; i < l; i++ ) {\n      j = i;\n      temp = arr[ i ];\n      while ( j > 0 && arr[ j - 1 ] > temp ) {\n        arr[ j ] = arr[ j - 1 ];\n        j--;\n      }\n      contador = i++;\n      arr[ j ] = temp;\n    }\n    setCount(contador)\n    \n    return arr;\n  };\n  \n  useEffect(() => {\n    const result = mergeSort(arrOrginal);\n    setResultArray(result)\n  }, []);\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <p>\n        Lista original\n        <br/>\n        <div style={{ display: \"flex\"}}>\n        {arrOrginal.map(itemOld => (\n             <p>\n             {itemOld},\n             </p>\n          ))}\n        </div>\n       \n        </p>\n    \n        <p>\n        Lista organizada\n        </p>\n        <div style={{ display: \"flex\"}}>\n        {resultArray.map(item => (\n             <p>\n             {item},\n             </p>\n          ))}\n        </div>\n        <p>\n        Numero de comparaciones\n        </p>\n        <p>\n        {count}\n        </p>\n        \n          <AnyChart\n            instance={stage}\n            width={800}\n            height={600}\n            charts={[chart2]}\n          />\n\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}